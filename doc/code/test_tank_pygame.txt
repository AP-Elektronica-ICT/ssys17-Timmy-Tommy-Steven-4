import RPi.GPIO as GPIO
import time, os
os.environ['SDL_VIDEODRIVER'] = 'dummy' #fake display
import pygame, sys
pygame.display.set_mode((1,1))          #fake display
from pygame.locals import *
pygame.init()
#screen = pygame.display.set_mode((400, 400))
clock = pygame.time.Clock()

crashed = False

gearOne = 35
gearTwo = 50
gearThree = 75
gearFour = 100

GPIO.setmode(GPIO.BCM)
GPIO.setwarnings(False)

GPIO.setup(18,GPIO.OUT) #motor 2
GPIO.setup(17,GPIO.OUT) #motor 2
GPIO.setup(22,GPIO.OUT) #motor 1
GPIO.setup(27,GPIO.OUT) #motor 1

GPIO.setup(9,GPIO.OUT)  #PWM 1
GPIO.setup(10,GPIO.OUT) #PWM 2

p = GPIO.PWM(9,100)
p2 = GPIO.PWM(10,100)

p.start(0)   #PWM
p2.start(0) #PWM

def forward():
 GPIO.output(18,0)
 GPIO.output(17,1)
 GPIO.output(22,1)
 GPIO.output(27,0)

def backward():
 GPIO.output(18,1)
 GPIO.output(17,0)
 GPIO.output(22,0)
 GPIO.output(27,1)

def left():
 GPIO.output(18,1)
 GPIO.output(17,0)
 GPIO.output(22,1)
 GPIO.output(27,0)

def right():
 GPIO.output(18,0)
 GPIO.output(17,1)
 GPIO.output(22,0)
 GPIO.output(27,1)

def stop():
 GPIO.output(18,0)
 GPIO.output(17,0)
 GPIO.output(22,0)
 GPIO.output(27,0)

def pwmZero():
 p.ChangeDutyCycle(0)
 p2.ChangeDutyCycle(0)

def pwmGearOne():
 p.ChangeDutyCycle(gearOne)
 p2.ChangeDutyCycle(gearOne)

def pwmGearTwo():
 p.ChangeDutyCycle(gearTwo)
 p2.ChangeDutyCycle(gearTwo)

def pwmGearThree():
 p.ChangeDutyCycle(gearThree)
 p2.ChangeDutyCycle(gearThree)

def pwmGearFour():
 p.ChangeDutyCycle(100)
 p2.ChangeDutyCycle(100)

try:
 while not crashed:
  events = pygame.event.get()
  for e in events:

   if e.type == pygame.QUIT:
    crashed = True
   if e.type == pygame.KEYDOWN and e.key == pygame.K_ESCAPE:
    crashed = True

   pressed = pygame.key.get_pressed()
   if pressed[pygame.K_UP]:
    pwmGearFour()
    forward()
    print('forward')
   if pressed[pygame.K_DOWN]:
    pwmGearFour()
    backward()
    print('backward')
   if pressed[pygame.K_LEFT]:
    left()
    pwmGearFour()
   if pressed[pygame.K_RIGHT]:
    right()
    pwmGearFour()

   if pressed[pygame.K_UP] and pressed[pygame.K_LEFT]:
    print('werkt dus!')

   if e.type == pygame.KEYUP:
    stop()
    #pwmZero()

  pygame.display.update()
  clock.tick(60)

except KeyboardInterrupt:
 pygame.quit()
 GPIO.cleanup()
 p.stop()
 p2.stop()
 quit()


